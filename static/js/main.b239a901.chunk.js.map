{"version":3,"sources":["components/utils/Utils.ts","components/utils/Form.tsx","redux/states/NotifState.ts","redux/actions/NotifyActions.ts","redux/states/AuthState.ts","redux/actions/AuthActions.ts","redux/states/TodoState.ts","components/modals/SignUpModal.tsx","components/modals/RecoverPasswordModal.tsx","components/modals/LoginModal.tsx","components/partials/NavBar.tsx","components/partials/Footer.tsx","components/pages/Home.tsx","components/partials/Toast.tsx","components/partials/ToastContainer.tsx","components/pages/settings/UpdateEmail.tsx","components/pages/settings/ChangePassword.tsx","components/modals/DeleteAccountModal.tsx","components/pages/settings/DeleteAccount.tsx","components/pages/settings/Index.tsx","redux/actions/TodoActions.ts","components/pages/todos/TodoAddForm.tsx","components/pages/todos/Todo.tsx","components/pages/todos/TodoTable.tsx","components/pages/todos/Index.tsx","components/utils/PrivateRoute.tsx","components/App.tsx","serviceWorker.ts","redux/reducers/AuthReducer.ts","redux/reducers/NotifierReducer.ts","redux/reducers/TodoReducer.ts","redux/Root.ts","index.tsx"],"names":["EMAIL_REGEXP","isEmailValid","email","test","isPasswordValid","password","undefined","length","Form","onSubmit","children","autoComplete","onKeyDown","e","key","preventDefault","stopPropagation","Severity","AuthTransactionType","notify","notification","type","payload","TodoTransactionType","transactionBegin","transactionType","transactionSuccess","transactionFailure","error","addLoggedUSer","user","removeLoggedUSer","SignUpModal","props","handleEmailChange","event","setState","state","target","value","handlePasswordChange","handleSubmit","dispatch","getState","a","REGISTER","auth","krypton","register","message","date","Date","SUCCESS","handleNotificationClick","handleCloseModal","close","showEmailErrorTips","this","showEmailSuccessTips","showPasswordErrorTips","showPasswordSuccessTips","className","isActive","aria-label","onClick","localErrorMessage","placeholder","onChange","icon","faEnvelope","faExclamationTriangle","faCheck","faLock","openloginModal","isTransactionLoading","Component","connect","ownProps","RecoverPasswordsModal","RECOVER_PASSWORD","recoverPassword","INFO","style","marginTop","LoginModal","LOGIN","login","getUser","openRecoverPasswordModalModal","textAlign","openSignupModal","NavBar","loginModal","recoverPasswordModal","signUpModal","closeModals","openLoginModal","logOut","history","push","setIsBurgerMenuActive","isBurgerMenuActive","render","role","boxShadow","href","src","width","height","alt","aria-expanded","data-target","aria-hidden","id","to","isLoggedIn","prevProps","isTransactionSuccess","withRouter","backgroundColor","paddingTop","paddingBottom","position","bottom","minHeight","rel","Toast","handleClick","hide","setTimeout","remove","node","hidedStyle","opacity","display","transition","toString","dangerouslySetInnerHTML","__html","ToastContainer","add","result","firstEl","lastEl","lastNotification","linkedListElement","element","prev","next","prevEl","nextEl","notif","isNotificationNew","toasts","current","i","getTime","notifier","UpdateEmail","UPDATE_EMAIL","update","DANGER","handleEdit","isEditionModeEnabled","handleCancelEdit","isDisabled","submitClass","disabled","marginRight","ChangePassword","handleActualPasswordChange","actualPassword","handleNewPasswordChange","newPassword","CHANGE_PASSWORD","changePassword","marginBottom","DeleteAccountModal","DELETE_ACCOUNT","delete","DeleteAccount","deleteAccountModal","deleteTodo","todoId","DELETE_TODO","graphQLQuery","deleteTodoQuery","sendRequest","getAuthorizationHeader","res","errors","todos","todo","list","filter","_id","data","todoRemoveById","record","Error","completeTodo","UPDATE_TODO","completeTodoQuery","todoUpdateById","map","currTodo","authorizationHeader","query","headers","fetch","method","credentials","body","JSON","stringify","then","json","addTodoQuery","text","userId","variables","fetchTodoQuery","TodoAddForm","handleTextChange","ADD_TODO","todoCreateOne","TodoComponent","handleClose","handleCompleted","verticalAlign","isCompleted","color","minPeriod","TodoTable","Todo","Todos","FETCH_TODO","todoMany","rest","location","WARNING","pathname","from","App","socket","io","on","title","CHECK_LOGIN_STATE","top","left","exact","path","Home","Footer","Boolean","window","hostname","match","initialState","Krypton","combineReducers","action","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b239a901.chunk.js","sourcesContent":["const EMAIL_REGEXP = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\nconst PASSWORD_MIN_LENGTH = 8;\n\nexport function isEmailValid(email: string): boolean {\n    return EMAIL_REGEXP.test(email);\n}\n\nexport function isPasswordValid(password: string): boolean {\n    return password !== undefined && password.length >= PASSWORD_MIN_LENGTH;\n}\n","import * as React from 'react';\n\ninterface FormProps {\n    autoComplete?: string;\n    onSubmit: () => any;\n    children?: JSX.Element[] | JSX.Element;\n}\nexport default function Form({ onSubmit, children, autoComplete }: FormProps) {\n    return (\n        <form\n            autoComplete={autoComplete}\n            onKeyDown={(e) => {\n                if (e.key === 'Enter') {\n                    e.preventDefault();\n                    onSubmit();\n                }\n            }}\n            onSubmit={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                onSubmit();\n            }}\n        >\n            {children}\n        </form>\n    );\n}\n","export enum Severity {\n    SECONDARY = 'secondary',\n    SUCCESS = 'success',\n    INFO = 'info',\n    WARNING = 'warning',\n    DANGER = 'danger',\n}\n\nexport interface Notification {\n    message: string;\n    type: Severity;\n    date: Date;\n}\n\nexport default interface NotifierState {\n    lastNotification: Notification | null;\n}\n","import { Notification } from '../states/NotifState';\n\nexport const notify = (notification: Notification) => ({\n    type: 'NOTIFY',\n    payload: { notification },\n});\n","import Krypton from '@krypton-org/krypton-web';\n\nexport enum AuthTransactionType {\n    CHECK_LOGIN_STATE,\n    LOGIN,\n    REGISTER,\n    UPDATE_EMAIL,\n    DELETE_ACCOUNT,\n    CHANGE_PASSWORD,\n    RECOVER_PASSWORD,\n    LOGOUT,\n}\n\nexport default interface AuthState {\n    krypton: Krypton;\n    user: any;\n    isLoggedIn: boolean;\n    isTransactionLoading: boolean;\n    isTransactionSuccess: boolean;\n    localErrorMessage: string | null;\n    transactionType: AuthTransactionType | null;\n}\n","import { RootState } from '../Root';\nimport { Severity } from '../states/NotifState';\nimport { notify } from './NotifyActions';\nimport { AuthTransactionType } from '../states/AuthState';\n\nexport const checkLoginState = () => {\n    return (dispatch: any, getState: () => RootState) => {\n        (async () => {\n            dispatch(transactionBegin(AuthTransactionType.CHECK_LOGIN_STATE));\n            const isLoggedIn = await getState().auth.krypton.isLoggedIn();\n            dispatch(transactionSuccess());\n            if (isLoggedIn) {\n                dispatch(addLoggedUSer(getState().auth.krypton.getUser()));\n            }\n        })();\n    };\n};\n\nexport const login = (email: string, password: string) => {\n    return async (dispatch: any, getState: () => RootState) => {\n        const krypton = getState().auth.krypton;\n        dispatch(transactionBegin(AuthTransactionType.LOGIN));\n        try {\n            await krypton.login(email, password);\n            dispatch(transactionSuccess());\n            dispatch(addLoggedUSer(krypton.getUser()));\n            dispatch(\n                notify({\n                    message: 'Log-in successful!',\n                    date: new Date(),\n                    type: Severity.SUCCESS,\n                }),\n            );\n        } catch (err) {\n            dispatch(transactionFailure(err.message));\n        }\n    };\n};\n\nexport const logout = () => {\n    return (dispatch: any) => {\n        dispatch(removeLoggedUSer());\n    };\n};\n\nexport const register = (email: string, password: string) => {\n    return async (dispatch: any, getState: () => RootState) => {\n        dispatch(transactionBegin(AuthTransactionType.REGISTER));\n        try {\n            await getState().auth.krypton.register(email, password);\n            dispatch(transactionSuccess());\n            dispatch(\n                notify({\n                    message: 'Register successful!',\n                    date: new Date(),\n                    type: Severity.SUCCESS,\n                }),\n            );\n        } catch (err) {\n            dispatch(transactionFailure(err.message));\n        }\n    };\n};\n\nexport const recoverPassword = (email: string) => {\n    return async (dispatch: any, getState: () => RootState) => {\n        dispatch(transactionBegin(AuthTransactionType.RECOVER_PASSWORD));\n        try {\n            await getState().auth.krypton.recoverPassword(email);\n            dispatch(transactionSuccess());\n            dispatch(\n                notify({\n                    message: 'If your email exists you will receive an email shortly to recover your password.',\n                    date: new Date(),\n                    type: Severity.INFO,\n                }),\n            );\n        } catch (err) {\n            dispatch(transactionFailure(err.message));\n        }\n    };\n};\n\nexport const changePassword = (actualPassword: string, newPassword: string) => {\n    return async (dispatch: any, getState: () => RootState) => {\n        dispatch(transactionBegin(AuthTransactionType.CHANGE_PASSWORD));\n        try {\n            await getState().auth.krypton.changePassword(actualPassword, newPassword);\n            dispatch(transactionSuccess());\n            dispatch(\n                notify({\n                    message: 'Your password has been changed.',\n                    date: new Date(),\n                    type: Severity.SUCCESS,\n                }),\n            );\n        } catch (err) {\n            dispatch(transactionFailure());\n            dispatch(\n                notify({\n                    message: err.message,\n                    date: new Date(),\n                    type: Severity.DANGER,\n                }),\n            );\n        }\n    };\n};\n\nexport const deleteAccount = (password: string) => {\n    return async (dispatch: any, getState: () => RootState) => {\n        dispatch(transactionBegin(AuthTransactionType.DELETE_ACCOUNT));\n        try {\n            await getState().auth.krypton.delete(password);\n            dispatch(transactionSuccess());\n            dispatch(\n                notify({\n                    message: 'Your account has been deleted successfully.',\n                    date: new Date(),\n                    type: Severity.SUCCESS,\n                }),\n            );\n            dispatch(removeLoggedUSer());\n        } catch (err) {\n            dispatch(transactionFailure(err.message));\n        }\n    };\n};\n\nexport const updateEmail = (email: string) => {\n    return async (dispatch: any, getState: () => RootState) => {\n        dispatch(transactionBegin(AuthTransactionType.UPDATE_EMAIL));\n        try {\n            await getState().auth.krypton.update({ email });\n            dispatch(transactionSuccess());\n            dispatch(addLoggedUSer(getState().auth.krypton.getUser()));\n            dispatch(\n                notify({\n                    message: 'Email successfully updated.',\n                    date: new Date(),\n                    type: Severity.SUCCESS,\n                }),\n            );\n        } catch (err) {\n            dispatch(transactionFailure());\n            dispatch(\n                notify({\n                    message: err.message,\n                    date: new Date(),\n                    type: Severity.DANGER,\n                }),\n            );\n        }\n    };\n};\n\nexport const logOut = () => {\n    return (dispatch: any, getState: () => RootState) => {\n        dispatch(removeLoggedUSer());\n    };\n};\n\nexport const AUTH_TRANSACTION_BEGIN = 'AUTH_TRANSACTION_BEGIN';\nexport const transactionBegin = (transactionType: AuthTransactionType) => ({\n    type: AUTH_TRANSACTION_BEGIN,\n    payload: { transactionType },\n});\n\nexport const AUTH_TRANSACTION_SUCCESS = 'AUTH_TRANSACTION_SUCCESS';\nexport const transactionSuccess = () => ({\n    type: AUTH_TRANSACTION_SUCCESS,\n});\n\nexport const AUTH_TRANSACTION_FAILURE = 'AUTH_TRANSACTION_FAILURE';\nexport const transactionFailure = (error?: string) => ({\n    type: AUTH_TRANSACTION_FAILURE,\n    payload: { error },\n});\n\nexport const ADD_LOGGED_USER = 'ADD_LOGGED_USER';\nexport const addLoggedUSer = (user: any) => ({\n    type: ADD_LOGGED_USER,\n    payload: { user },\n});\n\nexport const REMOVE_LOGGED_USER = 'REMOVE_LOGGED_USER';\nexport const removeLoggedUSer = () => ({\n    type: REMOVE_LOGGED_USER,\n});\n\nexport const REMOVE_MODALS_ERROR_MESSAGES = 'REMOVE_MODALS_ERROR_MESSAGES';\nexport const removeModalsErrorMessages = () => ({\n    type: REMOVE_MODALS_ERROR_MESSAGES,\n});\n","export enum TodoTransactionType {\n    ADD_TODO,\n    DELETE_TODO,\n    UPDATE_TODO,\n    FETCH_TODO,\n}\n\nexport interface Todo {\n    text: string;\n    isCompleted: boolean;\n    date: Date;\n    _id: string;\n}\n\nexport default interface TodoState {\n    isTransactionLoading: boolean;\n    isTransactionSuccess: boolean;\n    transactionType: TodoTransactionType | null;\n    list: Todo[];\n}\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEnvelope, faLock, faCheck, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\nimport { isEmailValid, isPasswordValid } from '../utils/Utils';\nimport Form from '../utils/Form';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../redux/Root';\nimport { register, removeModalsErrorMessages } from '../../redux/actions/AuthActions';\nimport { Dispatch } from 'redux';\nimport { AuthTransactionType } from '../../redux/states/AuthState';\n\ninterface ParentProps {\n    isActive: boolean;\n    close: (e?: React.MouseEvent<Element, MouseEvent>) => void;\n    openloginModal: (e: React.MouseEvent<Element, MouseEvent>) => void;\n}\n\ninterface ReduxProps {\n    isTransactionLoading: boolean;\n    localErrorMessage: string | null;\n    transactionType: AuthTransactionType | null;\n    dispatch: Dispatch<any>;\n}\n\ninterface Props extends ParentProps, ReduxProps {}\n\ninterface State {\n    isEmailValid: boolean;\n    isPasswordValid: boolean;\n    email: string;\n    password: string;\n}\n\nclass SignUpModal extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isEmailValid: false,\n            isPasswordValid: false,\n            email: '',\n            password: '',\n        };\n    }\n\n    handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            ...this.state,\n            email: event.target.value,\n            isEmailValid: isEmailValid(event.target.value),\n        });\n    };\n\n    handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            ...this.state,\n            password: event.target.value,\n            isPasswordValid: isPasswordValid(event.target.value),\n        });\n    };\n\n    handleSubmit = (event?: React.FormEvent<HTMLButtonElement>): void | undefined => {\n        this.props.dispatch(register(this.state.email, this.state.password));\n    };\n\n    handleNotificationClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void | undefined => {\n        this.props.dispatch(removeModalsErrorMessages());\n    };\n\n    handleCloseModal = (e?: React.MouseEvent<Element, MouseEvent>): void => {\n        this.props.dispatch(removeModalsErrorMessages());\n        this.props.close();\n    };\n\n    render() {\n        const showEmailErrorTips: boolean = this.state.email !== '' && !this.state.isEmailValid;\n        const showEmailSuccessTips: boolean = this.state.email !== '' && this.state.isEmailValid;\n        const showPasswordErrorTips: boolean = this.state.password !== '' && !this.state.isPasswordValid;\n        const showPasswordSuccessTips: boolean = this.state.password !== '' && this.state.isPasswordValid;\n        return (\n            <div className={this.props.isActive ? 'modal is-active' : 'modal'}>\n                <div className=\"modal-background\"></div>\n                <div className=\"modal-card\">\n                    <Form onSubmit={this.handleSubmit}>\n                        <header className=\"modal-card-head\">\n                            <p className=\"modal-card-title\">Sign up</p>\n                            <button\n                                type=\"button\"\n                                className=\"delete\"\n                                aria-label=\"close\"\n                                onClick={this.handleCloseModal}\n                            ></button>\n                        </header>\n                        <section className=\"modal-card-body\">\n                            {this.props.localErrorMessage !== null &&\n                                this.props.transactionType === AuthTransactionType.REGISTER && (\n                                    <div className=\"notification is-danger\">\n                                        <button\n                                            type=\"button\"\n                                            className=\"delete\"\n                                            onClick={this.handleNotificationClick}\n                                        ></button>\n                                        {this.props.localErrorMessage}\n                                    </div>\n                                )}\n                            <div className=\"field\">\n                                <label className=\"label\">Email</label>\n                                <div className=\"control has-icons-left has-icons-right\">\n                                    <input\n                                        className={\n                                            showEmailErrorTips\n                                                ? 'input is-danger'\n                                                : showEmailSuccessTips\n                                                ? ' input is-success'\n                                                : 'input'\n                                        }\n                                        type=\"email\"\n                                        placeholder=\"Email\"\n                                        value={this.state.email}\n                                        onChange={this.handleEmailChange}\n                                    />\n                                    <span className=\"icon is-small is-left\">\n                                        <FontAwesomeIcon icon={faEnvelope} />\n                                    </span>\n                                    {showEmailErrorTips && (\n                                        <span className=\"icon is-small is-right\">\n                                            <FontAwesomeIcon icon={faExclamationTriangle} />\n                                        </span>\n                                    )}\n                                    {showEmailSuccessTips && (\n                                        <span className=\"icon is-small is-right\">\n                                            <FontAwesomeIcon icon={faCheck} />\n                                        </span>\n                                    )}\n                                </div>\n                                {showEmailErrorTips && <p className=\"help is-danger\">This email is invalid</p>}\n                                {showEmailSuccessTips && <p className=\"help is-success\">This email is valid</p>}\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">Password</label>\n                                <div className=\"control has-icons-left has-icons-right\">\n                                    <input\n                                        className={\n                                            showPasswordErrorTips\n                                                ? 'input is-danger'\n                                                : showPasswordSuccessTips\n                                                ? ' input is-success'\n                                                : 'input'\n                                        }\n                                        type=\"password\"\n                                        placeholder=\"Password\"\n                                        value={this.state.password}\n                                        onChange={this.handlePasswordChange}\n                                    />\n                                    <span className=\"icon is-small is-left\">\n                                        <FontAwesomeIcon icon={faLock} />\n                                    </span>\n                                    {showPasswordErrorTips && (\n                                        <span className=\"icon is-small is-right\">\n                                            <FontAwesomeIcon icon={faExclamationTriangle} />\n                                        </span>\n                                    )}\n                                    {showPasswordSuccessTips && (\n                                        <span className=\"icon is-small is-right\">\n                                            <FontAwesomeIcon icon={faCheck} />\n                                        </span>\n                                    )}\n                                </div>\n                                {showPasswordErrorTips && <p className=\"help is-danger\">This password is invalid</p>}\n                                {showPasswordSuccessTips && <p className=\"help is-success\">This password is valid</p>}\n                            </div>\n                            Already have an account?{' '}\n                            <button className=\"button-link\" onClick={this.props.openloginModal} type=\"button\">\n                                log-in\n                            </button>\n                            .\n                        </section>\n                        <footer className=\"modal-card-foot\">\n                            {this.props.isTransactionLoading &&\n                            this.props.transactionType === AuthTransactionType.REGISTER ? (\n                                <button className=\"button is-link is-loading\">Submit</button>\n                            ) : (\n                                <button className=\"button is-link\" onSubmit={this.handleSubmit}>\n                                    Submit\n                                </button>\n                            )}\n                            <button className=\"button\" type=\"button\" onClick={this.handleCloseModal}>\n                                Cancel\n                            </button>\n                        </footer>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState, ownProps: ParentProps) => ({\n    isActive: ownProps.isActive,\n    close: ownProps.close,\n    openloginModal: ownProps.openloginModal,\n    isTransactionLoading: state.auth.isTransactionLoading,\n    localErrorMessage: state.auth.localErrorMessage,\n    transactionType: state.auth.transactionType,\n});\n\nexport default connect(mapStateToProps)(SignUpModal);\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../redux/Root';\nimport Form from '../utils/Form';\nimport { recoverPassword, removeModalsErrorMessages } from '../../redux/actions/AuthActions';\nimport { Dispatch } from 'redux';\nimport { AuthTransactionType } from '../../redux/states/AuthState';\n\ninterface ParentProps {\n    isActive: boolean;\n    close: (e: React.MouseEvent<Element, MouseEvent>) => void;\n}\n\ninterface ReduxProps {\n    isTransactionLoading: boolean;\n    localErrorMessage: string | null;\n    transactionType: AuthTransactionType | null;\n    dispatch: Dispatch<any>;\n}\n\ninterface State {\n    email: string;\n}\n\ninterface Props extends ParentProps, ReduxProps {}\n\nclass RecoverPasswordsModal extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            email: '',\n        };\n    }\n\n    handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>): void | undefined => {\n        this.setState({ email: event.target.value });\n    };\n\n    handleSubmit = (event?: React.FormEvent<HTMLButtonElement>): void | undefined => {\n        this.props.dispatch(recoverPassword(this.state.email));\n    };\n\n    handleNotificationClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void | undefined => {\n        this.props.dispatch(removeModalsErrorMessages());\n    };\n\n    render() {\n        return (\n            <div className={this.props.isActive ? 'modal is-active' : 'modal'}>\n                <div className=\"modal-background\"></div>\n                <div className=\"modal-card\">\n                    <Form onSubmit={this.handleSubmit}>\n                        <header className=\"modal-card-head\">\n                            <p className=\"modal-card-title\">Recover your password</p>\n                            <button\n                                type=\"button\"\n                                className=\"delete\"\n                                aria-label=\"close\"\n                                onClick={this.props.close}\n                            ></button>\n                        </header>\n                        <section className=\"modal-card-body\">\n                            {this.props.localErrorMessage !== null &&\n                                this.props.transactionType === AuthTransactionType.RECOVER_PASSWORD && (\n                                    <div className=\"notification is-danger\">\n                                        <button\n                                            type=\"button\"\n                                            className=\"delete\"\n                                            onClick={this.handleNotificationClick}\n                                        ></button>\n                                        {this.props.localErrorMessage}\n                                    </div>\n                                )}\n                            <div>\n                                Enter your address below, and we’ll email you instructions for setting a new password.\n                            </div>\n                            <div className=\"field\" style={{ marginTop: '10px' }}>\n                                <label className=\"label\">Email</label>\n                                <div className=\"control has-icons-left has-icons-right\">\n                                    <input\n                                        className=\"input\"\n                                        type=\"email\"\n                                        placeholder=\"Email\"\n                                        value={this.state.email}\n                                        onChange={this.handleEmailChange}\n                                    />\n                                    <span className=\"icon is-small is-left\">\n                                        <i className=\"fas fa-envelope\"></i>\n                                    </span>\n                                    <span className=\"icon is-small is-left\">\n                                        <FontAwesomeIcon icon={faEnvelope} />\n                                    </span>\n                                </div>\n                            </div>\n                        </section>\n                        <footer className=\"modal-card-foot\">\n                            {this.props.isTransactionLoading &&\n                            this.props.transactionType === AuthTransactionType.RECOVER_PASSWORD ? (\n                                <button className=\"button is-link is-loading\">Submit</button>\n                            ) : (\n                                <button className=\"button is-link\" onSubmit={this.handleSubmit}>\n                                    Submit\n                                </button>\n                            )}\n                            <button className=\"button\" type=\"button\" onClick={this.props.close}>\n                                Cancel\n                            </button>\n                        </footer>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState, ownProps: ParentProps) => ({\n    isActive: ownProps.isActive,\n    close: ownProps.close,\n    isTransactionLoading: state.auth.isTransactionLoading,\n    localErrorMessage: state.auth.localErrorMessage,\n    transactionType: state.auth.transactionType,\n});\n\nexport default connect(mapStateToProps)(RecoverPasswordsModal);\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEnvelope, faLock } from '@fortawesome/free-solid-svg-icons';\nimport Form from '../utils/Form';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../redux/Root';\nimport { login, removeModalsErrorMessages } from '../../redux/actions/AuthActions';\nimport { Dispatch } from 'redux';\nimport { AuthTransactionType } from '../../redux/states/AuthState';\n\ninterface ParentProps {\n    isActive: boolean;\n    close: (e?: React.MouseEvent<Element, MouseEvent>) => void;\n    openRecoverPasswordModalModal: (e: React.MouseEvent<Element, MouseEvent>) => void;\n    openSignupModal: (e: React.MouseEvent<Element, MouseEvent>) => void;\n}\n\ninterface ReduxProps {\n    isTransactionLoading: boolean;\n    localErrorMessage: string | null;\n    transactionType: AuthTransactionType | null;\n    dispatch: Dispatch<any>;\n}\n\ninterface Props extends ParentProps, ReduxProps {}\n\ninterface State {\n    email: string;\n    password: string;\n}\n\nclass LoginModal extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { password: '', email: '' };\n    }\n\n    handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>): void | undefined => {\n        this.setState({ ...this.state, email: event.target.value });\n    };\n\n    handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>): void | undefined => {\n        this.setState({ ...this.state, password: event.target.value });\n    };\n\n    handleSubmit = (event?: React.FormEvent<HTMLButtonElement>): void | undefined => {\n        this.props.dispatch(login(this.state.email, this.state.password));\n    };\n\n    handleNotificationClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void | undefined => {\n        this.props.dispatch(removeModalsErrorMessages());\n    };\n\n    handleCloseModal = (e?: React.MouseEvent<Element, MouseEvent>): void => {\n        this.props.dispatch(removeModalsErrorMessages());\n        this.props.close();\n    };\n\n    render() {\n        return (\n            <div className={this.props.isActive ? 'modal is-active' : 'modal'}>\n                <div className=\"modal-background\"></div>\n                <div className=\"modal-card\">\n                    <Form onSubmit={this.handleSubmit}>\n                        <header className=\"modal-card-head\">\n                            <p className=\"modal-card-title\">Log-in</p>\n                            <button\n                                type=\"button\"\n                                className=\"delete\"\n                                aria-label=\"close\"\n                                onClick={this.handleCloseModal}\n                            ></button>\n                        </header>\n                        <section className=\"modal-card-body\">\n                            {this.props.localErrorMessage !== null &&\n                                this.props.transactionType === AuthTransactionType.LOGIN && (\n                                    <div className=\"notification is-danger\">\n                                        <button\n                                            type=\"button\"\n                                            className=\"delete\"\n                                            onClick={this.handleNotificationClick}\n                                        ></button>\n                                        {this.props.localErrorMessage}\n                                    </div>\n                                )}\n                            <div className=\"field\">\n                                <label className=\"label\">Email</label>\n                                <div className=\"control has-icons-left has-icons-right\">\n                                    <input\n                                        className=\"input\"\n                                        type=\"email\"\n                                        placeholder=\"Email\"\n                                        value={this.state.email}\n                                        onChange={this.handleEmailChange}\n                                    />\n                                    <span className=\"icon is-small is-left\">\n                                        <FontAwesomeIcon icon={faEnvelope} />\n                                    </span>\n                                </div>\n                            </div>\n\n                            <div className=\"field\">\n                                <label className=\"label\">Password</label>\n                                <div className=\"control has-icons-left has-icons-right\">\n                                    <input\n                                        className=\"input\"\n                                        type=\"password\"\n                                        placeholder=\"Password\"\n                                        value={this.state.password}\n                                        onChange={this.handlePasswordChange}\n                                    />\n                                    <span className=\"icon is-small is-left\">\n                                        <FontAwesomeIcon icon={faLock} />\n                                    </span>\n                                </div>\n                            </div>\n                            <button className=\"button-link\" onClick={this.props.openRecoverPasswordModalModal} type=\"button\">\n                                Password forgotten?\n                            </button>\n                            <hr />\n                            <div style={{ textAlign: 'center' }}>\n                                No account yet?{' '}\n                                <button className=\"button-link\" onClick={this.props.openSignupModal} type=\"button\">\n                                    Sign up\n                                </button>\n                                .\n                            </div>\n                        </section>\n                        <footer className=\"modal-card-foot\">\n                            {this.props.isTransactionLoading &&\n                            this.props.transactionType === AuthTransactionType.LOGIN ? (\n                                <button className=\"button is-link is-loading\">Submit</button>\n                            ) : (\n                                <button className=\"button is-link\" onSubmit={this.handleSubmit}>\n                                    Submit\n                                </button>\n                            )}\n                            <button className=\"button\" type=\"button\" onClick={this.handleCloseModal}>\n                                Cancel\n                            </button>\n                        </footer>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState, ownProps: ParentProps) => ({\n    isActive: ownProps.isActive,\n    close: ownProps.close,\n    openRecoverPasswordModalModal: ownProps.openRecoverPasswordModalModal,\n    openSignupModal: ownProps.openSignupModal,\n    isTransactionLoading: state.auth.isTransactionLoading,\n    localErrorMessage: state.auth.localErrorMessage,\n    transactionType: state.auth.transactionType,\n});\n\nexport default connect(mapStateToProps)(LoginModal);\n","import React, { Component } from 'react';\nimport SignUpModal from '../modals/SignUpModal';\nimport RecoverPasswordsModal from '../modals/RecoverPasswordModal';\nimport LoginModal from '../modals/LoginModal';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../redux/Root';\nimport { Dispatch } from 'redux';\nimport { logOut } from '../../redux/actions/AuthActions';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\n\ninterface Props {\n    isLoggedIn: boolean;\n    user: { email: string; _id: string; verified: boolean } | null | undefined;\n    isTransactionSuccess: boolean;\n    isTransactionLoading: boolean;\n    dispatch: Dispatch<any>;\n}\n\ninterface State {\n    loginModal: boolean;\n    signUpModal: boolean;\n    recoverPasswordModal: boolean;\n    isBurgerMenuActive: boolean;\n}\n\nclass NavBar extends Component<Props & RouteComponentProps, State> {\n    constructor(props: Props & RouteComponentProps) {\n        super(props);\n        this.state = {\n            loginModal: false,\n            signUpModal: false,\n            recoverPasswordModal: false,\n            isBurgerMenuActive: false,\n        };\n    }\n\n    openSignupModal = (e: React.MouseEvent<Element, MouseEvent>) => {\n        this.setState({\n            ...this.state,\n            loginModal: false,\n            recoverPasswordModal: false,\n            signUpModal: true,\n        });\n    };\n\n    closeModals = (e?: React.MouseEvent<Element, MouseEvent>) => {\n        this.setState({\n            ...this.state,\n            loginModal: false,\n            recoverPasswordModal: false,\n            signUpModal: false,\n        });\n    };\n\n    openLoginModal = (e: React.MouseEvent<Element, MouseEvent>) => {\n        this.setState({\n            ...this.state,\n            loginModal: true,\n            recoverPasswordModal: false,\n            signUpModal: false,\n        });\n    };\n\n    openRecoverPasswordModalModal = (e: React.MouseEvent<Element, MouseEvent>) => {\n        this.setState({\n            ...this.state,\n            loginModal: false,\n            recoverPasswordModal: true,\n            signUpModal: false,\n        });\n    };\n\n    logOut = (e: React.MouseEvent<Element, MouseEvent>) => {\n        this.props.dispatch(logOut());\n        this.props.history.push('/');\n    };\n\n    setIsBurgerMenuActive = (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        this.setState({\n            ...this.state,\n            isBurgerMenuActive: !this.state.isBurgerMenuActive,\n        });\n    };\n\n    componentDidUpdate(prevProps: any) {\n        if (prevProps.isTransactionLoading && !this.props.isTransactionLoading && this.props.isTransactionSuccess) {\n            this.closeModals();\n        }\n    }\n\n    render = () => {\n        return (\n            <div>\n                <nav\n                    className=\"navbar\"\n                    role=\"navigation\"\n                    aria-label=\"main navigation\"\n                    style={{ boxShadow: '0 3px 3px -2px rgba(0,0,0,.2)' }}\n                >\n                    <div className=\"container\">\n                        <div className=\"navbar-brand\">\n                            <a className=\"navbar-item\" href=\"https://krypton-org.github.io/krypton-web-demo/\">\n                                <img\n                                    src=\"https://github.com/krypton-org/krypton-web/raw/master/img/logo-krypton-web.png\"\n                                    width=\"30\"\n                                    height=\"30\"\n                                    alt=\"krypton web logo\"\n                                />\n                            </a>\n                            {/* eslint-disable-next-line */}\n                            <a\n                                onClick={this.setIsBurgerMenuActive}\n                                role=\"button\"\n                                className={`navbar-burger burger ${this.state.isBurgerMenuActive ? 'is-active' : ''}`}\n                                aria-label=\"menu\"\n                                aria-expanded=\"false\"\n                                data-target=\"navbarBasicExample\"\n                            >\n                                <span aria-hidden=\"true\"></span>\n                                <span aria-hidden=\"true\"></span>\n                                <span aria-hidden=\"true\"></span>\n                            </a>\n                        </div>\n                        <div\n                            id=\"navbarBasicExample\"\n                            className={`navbar-menu ${this.state.isBurgerMenuActive ? 'is-active' : ''}`}\n                        >\n                            <div className=\"navbar-start\">\n                                <Link className=\"navbar-item\" to=\"/\">\n                                    Home\n                                </Link>\n                                <Link className=\"navbar-item\" to=\"/todos\">\n                                    Todos\n                                </Link>\n                            </div>\n                            <div className=\"navbar-end\">\n                                {this.props.isLoggedIn ? (\n                                    <div className=\"navbar-item has-dropdown is-hoverable\">\n                                        {/* eslint-disable-next-line */}\n                                        <a className=\"navbar-link\">{this.props.user?.email}</a>\n\n                                        <div className=\"navbar-dropdown\">\n                                            <Link className=\"navbar-item\" to=\"/settings\">\n                                                Settings\n                                            </Link>\n                                            {/* eslint-disable-next-line */}\n                                            <a className=\"navbar-item\" onClick={this.logOut}>\n                                                Log out\n                                            </a>\n                                        </div>\n                                    </div>\n                                ) : (\n                                    <div className=\"navbar-item\">\n                                        {/* eslint-disable-next-line */}\n                                        <div className=\"buttons\">\n                                            {/* eslint-disable-next-line */}\n                                            <a className=\"button is-primary\" onClick={this.openSignupModal}>\n                                                <strong>Sign up</strong>\n                                            </a>\n                                            {/* eslint-disable-next-line */}\n                                            <a className=\"button is-light\" onClick={this.openLoginModal}>\n                                                Log-in\n                                            </a>\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </nav>\n                <SignUpModal\n                    isActive={this.state.signUpModal}\n                    close={this.closeModals}\n                    openloginModal={this.openLoginModal}\n                />\n                <RecoverPasswordsModal isActive={this.state.recoverPasswordModal} close={this.closeModals} />\n                <LoginModal\n                    isActive={this.state.loginModal}\n                    close={this.closeModals}\n                    openRecoverPasswordModalModal={this.openRecoverPasswordModalModal}\n                    openSignupModal={this.openSignupModal}\n                />\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    isLoggedIn: state.auth.isLoggedIn,\n    user: state.auth.user,\n    isTransactionSuccess: state.auth.isTransactionSuccess,\n    isTransactionLoading: state.auth.isTransactionLoading,\n    transactionType: state.auth.transactionType,\n});\n\nexport default withRouter(connect(mapStateToProps)(NavBar));\n","import React from 'react';\n\nexport default () => {\n    const style: React.CSSProperties = {\n        backgroundColor: '#F3F3F3',\n        paddingTop: '10px',\n        paddingBottom: '0px',\n        position: 'fixed',\n        bottom: '0',\n        minHeight: '60px',\n        width: '100%',\n    };\n    return (\n        <footer className=\"footer\" style={style}>\n            <div className=\"content has-text-centered\">\n                <p>\n                    <strong>Krypton Web Demonstration</strong>. The source code is available under the{' '}\n                    <a href=\"https://github.com/krypton-org/krypton-web-demo/blob/master/LICENSE\">MIT</a> license.\n                </p>\n            </div>\n        </footer>\n    );\n};\n","import React from 'react';\n\nexport default () => {\n    return (\n        <div>\n            <section className=\"hero is-primary\">\n                <div className=\"hero-body\">\n                    <div className=\"container\">\n                        <h1 className=\"title\">\n                            Welcome to this React To-do list made with Krypton for authentication.\n                        </h1>\n                        <h2 className=\"subtitle\">Register to add your todos!</h2>\n                    </div>\n                </div>\n            </section>\n            <div className=\"container\">\n                <p>\n                    This is just a demo, the database is purged each night. It aims to show how easy it is to use\n                    Krypton for website authentication.\n                </p>\n                <p>\n                    Check source on{' '}\n                    <a href=\"https://github.com/krypton-org/krypton-web-demo\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        GitHub\n                    </a>\n                </p>\n            </div>\n        </div>\n    );\n};\n","import React, { Component } from 'react';\nimport { Node } from './ToastContainer';\nimport { Notification } from '../../redux/states/NotifState';\n\ninterface Prop {\n    message: string;\n    type: string;\n    date: Date;\n    key: number;\n    remove: (node: Node<Notification>) => void;\n    node: Node<Notification>;\n}\n\ninterface State {\n    hide: boolean;\n}\n\nexport default class Toast extends Component<Prop, State> {\n    constructor(props: Prop) {\n        super(props);\n\n        this.state = {\n            hide: false,\n        };\n    }\n\n    handleClick = () => {\n        this.setState({ ...this.state, hide: true });\n        setTimeout(() => {\n            this.props.remove(this.props.node);\n        }, 1000);\n    };\n\n    render() {\n        let hidedStyle;\n        if (this.state.hide) {\n            hidedStyle = {\n                opacity: 0,\n                display: 'none',\n            };\n        }\n        let animationStyle = {\n            transition: 'all .5s ease-in-out',\n        };\n        return (\n            <article\n                style={{ ...hidedStyle, ...animationStyle, width: \"300px\"}}\n                className={'message is-' + this.props.type.toString()}\n            >\n                <div className=\"message-body\">\n                    <div className=\"columns\">\n                        <div className=\"column\" dangerouslySetInnerHTML={{ __html: this.props.message }}></div>\n                        <div className=\"column is-one-fifth is-vven\">\n                            <button className=\"delete\" aria-label=\"delete\" onClick={this.handleClick}></button>\n                        </div>\n                    </div>\n                </div>\n            </article>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport Toast from './Toast';\nimport { Notification } from '../../redux/states/NotifState';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../redux/Root';\nimport './ToastContainer.css';\n\nconst MAX_DISPLAYED = 15;\n\ninterface Prop {\n    notification: Notification | null;\n}\n\nexport interface Node<T> {\n    element: T;\n    prev: Node<T> | null;\n    next: Node<T> | null;\n}\n\ninterface State {\n    lastNotification: Notification | null;\n    firstEl: Node<Notification> | null;\n    lastEl: Node<Notification> | null;\n}\n\nclass ToastContainer extends Component<Prop, State> {\n    constructor(props: Prop) {\n        super(props);\n        this.state = {\n            lastNotification: null,\n            firstEl: null,\n            lastEl: null,\n        };\n        if (this.props.notification) {\n            this.add(this.props.notification);\n        }\n    }\n\n    add = (notification: Notification | null) => {\n        if (notification === null) {\n            return;\n        }\n        const result: State = {\n            firstEl: null,\n            lastEl: null,\n            lastNotification: notification,\n        };\n        const linkedListElement = {\n            element: notification,\n            prev: null,\n            next: null,\n        };\n        if (this.state.firstEl == null || this.state.lastEl == null) {\n            result.firstEl = linkedListElement;\n            result.lastEl = linkedListElement;\n        } else {\n            this.connect(this.state.lastEl, linkedListElement);\n            result.firstEl = this.state.firstEl;\n            result.lastEl = linkedListElement;\n        }\n        this.setState(result);\n    };\n\n    connect = (prevEl: Node<Notification>, nextEl: Node<Notification>) => {\n        prevEl.next = nextEl;\n        nextEl.prev = prevEl;\n    };\n\n    remove = (linkedListElement: Node<Notification>) => {\n        const result: State = {\n            firstEl: this.state.firstEl,\n            lastEl: this.state.firstEl,\n            lastNotification: this.state.lastNotification,\n        };\n        if (linkedListElement.prev && linkedListElement.next) {\n            this.connect(linkedListElement.prev, linkedListElement.next);\n        } else if (linkedListElement.prev) {\n            linkedListElement.prev.next = null;\n            result.lastEl = linkedListElement.prev;\n            result.firstEl = this.state.firstEl;\n        } else if (linkedListElement.next) {\n            linkedListElement.next.prev = null;\n            result.lastEl = this.state.lastEl;\n            result.firstEl = linkedListElement.next;\n        } else {\n            result.lastEl = null;\n            result.firstEl = null;\n        }\n        this.setState(result);\n    };\n\n    isNotificationNew(notif: Notification | null): boolean {\n        return notif !== null && notif !== this.state.lastNotification;\n    }\n\n    componentDidUpdate() {\n        if (this.isNotificationNew(this.props.notification)) {\n            this.add(this.props.notification);\n        }\n    }\n\n    render() {\n        const toasts = [];\n        let current = this.state.firstEl;\n        let i = 0;\n\n        while (current && i < MAX_DISPLAYED) {\n            toasts.push(\n                <Toast\n                    node={current}\n                    message={current.element.message}\n                    type={current.element.type}\n                    date={current.element.date}\n                    key={current.element.date.getTime()}\n                    remove={(node) => {\n                        this.remove(node);\n                    }}\n                />,\n            );\n            current = current.next;\n            ++i;\n        }\n\n        return <div className=\"toast-container\">{toasts}</div>;\n    }\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    notification: state.notifier.lastNotification,\n});\n\nexport default connect(mapStateToProps)(ToastContainer);\n","import React, { Component } from 'react';\nimport { RootState } from '../../../redux/Root';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport Form from '../../utils/Form';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEnvelope, faCheck, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\nimport { isEmailValid } from '../../utils/Utils';\nimport { updateEmail } from '../../../redux/actions/AuthActions';\nimport { AuthTransactionType } from '../../../redux/states/AuthState';\n\ninterface Props {\n    dispatch: Dispatch<any>;\n    user: { email: string; _id: string; verified: boolean } | null | undefined;\n    isTransactionLoading: boolean;\n    transactionType: AuthTransactionType | null;\n}\n\ninterface State {\n    isEmailValid: boolean;\n    email: string;\n    isEditionModeEnabled: boolean;\n}\n\nclass UpdateEmail extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isEmailValid: false,\n            email: props.user?.email ? props.user?.email : '',\n            isEditionModeEnabled: false,\n        };\n    }\n\n    handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            ...this.state,\n            email: event.target.value,\n            isEmailValid: isEmailValid(event.target.value),\n        });\n    };\n\n    handleSubmit = (event?: React.FormEvent<HTMLButtonElement>): void | undefined => {\n        if (isEmailValid(this.state.email)) {\n            this.props.dispatch(updateEmail(this.state.email));\n        }\n    };\n\n    handleEdit = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void | undefined => {\n        this.setState({ ...this.state, isEditionModeEnabled: true });\n    };\n\n    handleCancelEdit = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void | undefined => {\n        this.setState({ ...this.state, isEditionModeEnabled: false });\n    };\n\n    componentDidUpdate(prevProps: Props) {\n        if (\n            prevProps.isTransactionLoading &&\n            !this.props.isTransactionLoading &&\n            this.props.transactionType === AuthTransactionType.UPDATE_EMAIL\n        ) {\n            this.setState({ ...this.state, isEditionModeEnabled: false });\n        }\n    }\n\n    render() {\n        const showEmailErrorTips: boolean = this.state.email !== this.props.user?.email && !this.state.isEmailValid;\n        const showEmailSuccessTips: boolean = this.state.email !== this.props.user?.email && this.state.isEmailValid;\n\n        const isDisabled = !isEmailValid(this.state.email);\n        let submitClass = 'button is-link ';\n        if (this.props.isTransactionLoading && this.props.transactionType === AuthTransactionType.UPDATE_EMAIL) {\n            submitClass += 'is-loading';\n        }\n        return (\n            <div>\n                <h2 className=\"subtitle\">Update your email</h2>\n                <Form onSubmit={this.handleSubmit}>\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            {!this.state.isEditionModeEnabled ? (\n                                <div>{this.props.user?.email}</div>\n                            ) : (\n                                <div className=\"control has-icons-left has-icons-right\">\n                                    <input\n                                        className={\n                                            showEmailErrorTips\n                                                ? 'input is-danger'\n                                                : showEmailSuccessTips\n                                                ? ' input is-success'\n                                                : 'input'\n                                        }\n                                        type=\"email\"\n                                        placeholder=\"Email\"\n                                        value={this.state.email}\n                                        onChange={this.handleEmailChange}\n                                    />\n                                    <span className=\"icon is-small is-left\">\n                                        <FontAwesomeIcon icon={faEnvelope} />\n                                    </span>\n                                    {showEmailErrorTips && (\n                                        <span className=\"icon is-small is-right\">\n                                            <FontAwesomeIcon icon={faExclamationTriangle} />\n                                        </span>\n                                    )}\n                                    {showEmailSuccessTips && (\n                                        <span className=\"icon is-small is-right\">\n                                            <FontAwesomeIcon icon={faCheck} />\n                                        </span>\n                                    )}\n                                    {showEmailErrorTips && <p className=\"help is-danger\">This email is invalid</p>}\n                                    {showEmailSuccessTips && <p className=\"help is-success\">This email is valid</p>}\n                                </div>\n                            )}\n                        </div>\n                        <div className=\"column\">\n                            {!this.state.isEditionModeEnabled && (\n                                <button className=\"button\" type=\"button\" onClick={this.handleEdit}>\n                                    Edit\n                                </button>\n                            )}\n                            {this.state.isEditionModeEnabled && (\n                                <div>\n                                    <button\n                                        className={submitClass}\n                                        disabled={isDisabled}\n                                        style={{ marginRight: '5px' }}\n                                    >\n                                        Submit\n                                    </button>\n                                    <button className=\"button\" type=\"button\" onClick={this.handleCancelEdit}>\n                                        Cancel\n                                    </button>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    isTransactionLoading: state.auth.isTransactionLoading,\n    transactionType: state.auth.transactionType,\n    user: state.auth.user,\n});\n\nexport default connect(mapStateToProps)(UpdateEmail);\n","import React, { Component } from 'react';\nimport { RootState } from '../../../redux/Root';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport Form from '../../utils/Form';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLock, faCheck, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\nimport { isPasswordValid } from '../../utils/Utils';\nimport { changePassword } from '../../../redux/actions/AuthActions';\nimport { AuthTransactionType } from '../../../redux/states/AuthState';\n\ninterface Props {\n    dispatch: Dispatch<any>;\n    isTransactionLoading: boolean;\n    transactionType: AuthTransactionType | null;\n}\n\ninterface State {\n    isPasswordValid: boolean;\n    actualPassword: string;\n    newPassword: string;\n}\n\nclass ChangePassword extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isPasswordValid: false,\n            actualPassword: '',\n            newPassword: '',\n        };\n    }\n\n    handleActualPasswordChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({ ...this.state, actualPassword: event.target.value });\n    };\n\n    handleNewPasswordChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            ...this.state,\n            newPassword: event.target.value,\n            isPasswordValid: isPasswordValid(event.target.value),\n        });\n    };\n\n    handleSubmit = (event?: React.FormEvent<HTMLButtonElement>): void | undefined => {\n        if (isPasswordValid(this.state.newPassword)) {\n            this.props.dispatch(changePassword(this.state.actualPassword, this.state.newPassword));\n        }\n    };\n\n    render() {\n        const showPasswordErrorTips: boolean = this.state.newPassword !== '' && !this.state.isPasswordValid;\n        const showPasswordSuccessTips: boolean = this.state.newPassword !== '' && this.state.isPasswordValid;\n\n        const isDisabled = !isPasswordValid(this.state.newPassword) && this.state.actualPassword !== '';\n        let submitClass = 'button is-link ';\n        if (this.props.isTransactionLoading && this.props.transactionType === AuthTransactionType.CHANGE_PASSWORD) {\n            submitClass += 'is-loading';\n        }\n        return (\n            <div>\n                <h2 className=\"subtitle\">Change your password</h2>\n                <Form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <div className=\"control has-icons-left has-icons-right\" style={{ marginBottom: '15px' }}>\n                                <input\n                                    autoComplete=\"off\"\n                                    className=\"input\"\n                                    type=\"password\"\n                                    placeholder=\"Actual password\"\n                                    value={this.state.actualPassword}\n                                    onChange={this.handleActualPasswordChange}\n                                />\n                                <span className=\"icon is-small is-left\">\n                                    <FontAwesomeIcon icon={faLock} />\n                                </span>\n                            </div>\n                            <div className=\"control has-icons-left has-icons-right\">\n                                <input\n                                    autoComplete=\"off\"\n                                    className={\n                                        showPasswordErrorTips\n                                            ? 'input is-danger'\n                                            : showPasswordSuccessTips\n                                            ? ' input is-success'\n                                            : 'input'\n                                    }\n                                    type=\"password\"\n                                    placeholder=\"New password\"\n                                    value={this.state.newPassword}\n                                    onChange={this.handleNewPasswordChange}\n                                />\n                                <span className=\"icon is-small is-left\">\n                                    <FontAwesomeIcon icon={faLock} />\n                                </span>\n                                {showPasswordErrorTips && (\n                                    <span className=\"icon is-small is-right\">\n                                        <FontAwesomeIcon icon={faExclamationTriangle} />\n                                    </span>\n                                )}\n                                {showPasswordSuccessTips && (\n                                    <span className=\"icon is-small is-right\">\n                                        <FontAwesomeIcon icon={faCheck} />\n                                    </span>\n                                )}\n                                {showPasswordErrorTips && <p className=\"help is-danger\">This password is invalid</p>}\n                                {showPasswordSuccessTips && <p className=\"help is-success\">This password is valid</p>}\n                            </div>\n                        </div>\n                        <div className=\"column\">\n                            <button className={submitClass} disabled={isDisabled}>\n                                Submit\n                            </button>\n                        </div>\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    isTransactionLoading: state.auth.isTransactionLoading,\n    transactionType: state.auth.transactionType,\n});\n\nexport default connect(mapStateToProps)(ChangePassword);\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLock } from '@fortawesome/free-solid-svg-icons';\nimport Form from '../utils/Form';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../redux/Root';\nimport { removeModalsErrorMessages, deleteAccount } from '../../redux/actions/AuthActions';\nimport { Dispatch } from 'redux';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { AuthTransactionType } from '../../redux/states/AuthState';\n\ninterface ParentProps {\n    isActive: boolean;\n    close: (e?: React.MouseEvent<Element, MouseEvent>) => void;\n}\n\ninterface ReduxProps {\n    isTransactionLoading: boolean;\n    localErrorMessage: string | null;\n    transactionType: AuthTransactionType | null;\n    isTransactionSuccess: boolean;\n    dispatch: Dispatch<any>;\n}\n\ninterface State {\n    password: string;\n}\n\ninterface Props extends ParentProps, ReduxProps, RouteComponentProps {}\n\nclass DeleteAccountModal extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { password: '' };\n    }\n\n    handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>): void | undefined => {\n        this.setState({ ...this.state, password: event.target.value });\n    };\n\n    handleSubmit = (event?: React.FormEvent<HTMLButtonElement>): void | undefined => {\n        this.props.dispatch(deleteAccount(this.state.password));\n    };\n\n    handleNotificationClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void | undefined => {\n        this.props.dispatch(removeModalsErrorMessages());\n    };\n\n    handleCloseModal = (e?: React.MouseEvent<Element, MouseEvent>): void => {\n        this.props.dispatch(removeModalsErrorMessages());\n        this.props.close();\n    };\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.isTransactionSuccess && this.props.transactionType === AuthTransactionType.DELETE_ACCOUNT) {\n            this.props.history.push('/');\n        }\n    }\n\n    render() {\n        return (\n            <div className={this.props.isActive ? 'modal is-active' : 'modal'}>\n                <div className=\"modal-background\"></div>\n                <div className=\"modal-card\">\n                    <Form onSubmit={this.handleSubmit}>\n                        <header className=\"modal-card-head\">\n                            <p className=\"modal-card-title\">Delete account</p>\n                            <button\n                                type=\"button\"\n                                className=\"delete\"\n                                aria-label=\"close\"\n                                onClick={this.handleCloseModal}\n                            ></button>\n                        </header>\n                        <section className=\"modal-card-body\">\n                            {this.props.localErrorMessage !== null &&\n                                this.props.transactionType === AuthTransactionType.DELETE_ACCOUNT && (\n                                    <div className=\"notification is-danger\">\n                                        <button\n                                            type=\"button\"\n                                            className=\"delete\"\n                                            onClick={this.handleNotificationClick}\n                                        ></button>\n                                        {this.props.localErrorMessage}\n                                    </div>\n                                )}\n                            <div className=\"field\">\n                                <label className=\"label\">Enter your password</label>\n                                <div className=\"control has-icons-left has-icons-right\">\n                                    <input\n                                        className=\"input\"\n                                        type=\"password\"\n                                        placeholder=\"Password\"\n                                        value={this.state.password}\n                                        onChange={this.handlePasswordChange}\n                                    />\n                                    <span className=\"icon is-small is-left\">\n                                        <FontAwesomeIcon icon={faLock} />\n                                    </span>\n                                </div>\n                            </div>\n                        </section>\n                        <footer className=\"modal-card-foot\">\n                            {this.props.isTransactionLoading &&\n                            this.props.transactionType === AuthTransactionType.DELETE_ACCOUNT ? (\n                                <button className=\"button is-link is-loading\">Submit</button>\n                            ) : (\n                                <button className=\"button is-link\" onSubmit={this.handleSubmit}>\n                                    Submit\n                                </button>\n                            )}\n                            <button className=\"button\" type=\"button\" onClick={this.handleCloseModal}>\n                                Cancel\n                            </button>\n                        </footer>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState, ownProps: ParentProps) => ({\n    isActive: ownProps.isActive,\n    close: ownProps.close,\n    isTransactionLoading: state.auth.isTransactionLoading,\n    localErrorMessage: state.auth.localErrorMessage,\n    transactionType: state.auth.transactionType,\n    isTransactionSuccess: state.auth.isTransactionSuccess,\n});\nexport default withRouter(connect(mapStateToProps)(DeleteAccountModal));\n","import React, { Component } from 'react';\nimport { RootState } from '../../../redux/Root';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport DeleteAccountModal from '../../modals/DeleteAccountModal';\n\ninterface Props {\n    dispatch: Dispatch<any>;\n}\n\ninterface State {\n    deleteAccountModal: boolean;\n}\n\nclass DeleteAccount extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            deleteAccountModal: false,\n        };\n    }\n\n    handleClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void | undefined => {\n        this.setState({ deleteAccountModal: true });\n    };\n\n    closeModals = (e?: React.MouseEvent<Element, MouseEvent>) => {\n        this.setState({ deleteAccountModal: false });\n    };\n\n    render() {\n        return (\n            <div className=\"columns\" style={{ marginTop: '50px' }}>\n                <div className=\"column is-half\">\n                    <article className=\"message is-danger\">\n                        <div className=\"message-header\">\n                            <p>Danger Zone</p>\n                        </div>\n                        <div className=\"message-body\">\n                            <button className=\"button is-danger is-outlined\" onClick={this.handleClick}>\n                                Delete account\n                            </button>\n                        </div>\n                    </article>\n                </div>\n                <DeleteAccountModal isActive={this.state.deleteAccountModal} close={this.closeModals} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    user: state.auth.user,\n});\n\nexport default connect(mapStateToProps)(DeleteAccount);\n","import React from 'react';\nimport UpdateEmail from './UpdateEmail';\nimport ChangePassword from './ChangePassword';\nimport DeleteAccount from './DeleteAccount';\n\nexport default () => {\n    return (\n        <div className=\"container\">\n            <h1 className=\"title\">Settings</h1>\n            <UpdateEmail />\n            <ChangePassword />\n            <DeleteAccount />\n        </div>\n    );\n};\n","import { notify } from './NotifyActions';\nimport { Severity } from '../states/NotifState';\nimport { RootState } from '../Root';\nimport { TodoTransactionType, Todo } from '../states/TodoState';\n\nexport const addTodo = (text: string) => {\n    return async (dispatch: any, getState: () => RootState) => {\n        dispatch(transactionBegin(TodoTransactionType.ADD_TODO));\n        try {\n            const graphQLQuery = addTodoQuery(text, getState().auth.krypton.getUser()._id);\n            const res = await sendRequest(getState().auth.krypton.getAuthorizationHeader(), graphQLQuery);\n            if (!res.errors) {\n                const todo = res.data.todoCreateOne.record;\n                dispatch(transactionSuccess([todo, ...getState().todo.list]));\n            } else {\n                throw new Error('Transaction failed');\n            }\n        } catch (err) {\n            dispatch(transactionFailure());\n            dispatch(\n                notify({\n                    message: err.message,\n                    date: new Date(),\n                    type: Severity.DANGER,\n                }),\n            );\n        }\n    };\n};\n\nexport const deleteTodo = (todoId: string) => {\n    return async (dispatch: any, getState: () => RootState) => {\n        dispatch(transactionBegin(TodoTransactionType.DELETE_TODO));\n        try {\n            const graphQLQuery = deleteTodoQuery(todoId);\n            const res = await sendRequest(getState().auth.krypton.getAuthorizationHeader(), graphQLQuery);\n            if (!res.errors) {\n                const todos = getState().todo.list.filter((todo) => todo._id !== res.data.todoRemoveById.record._id);\n                dispatch(transactionSuccess(todos));\n            } else {\n                throw new Error('Transaction failed');\n            }\n        } catch (err) {\n            dispatch(transactionFailure());\n            dispatch(\n                notify({\n                    message: err.message,\n                    date: new Date(),\n                    type: Severity.DANGER,\n                }),\n            );\n        }\n    };\n};\n\nexport const completeTodo = (todoId: string) => {\n    return async (dispatch: any, getState: () => RootState) => {\n        dispatch(transactionBegin(TodoTransactionType.UPDATE_TODO));\n        try {\n            const graphQLQuery = completeTodoQuery(todoId);\n            const res = await sendRequest(getState().auth.krypton.getAuthorizationHeader(), graphQLQuery);\n            if (!res.errors) {\n                const todo = res.data.todoUpdateById.record;\n                dispatch(\n                    transactionSuccess(\n                        getState().todo.list.map((currTodo) => (currTodo._id === todo._id ? todo : currTodo)),\n                    ),\n                );\n            } else {\n                throw new Error('Transaction failed');\n            }\n        } catch (err) {\n            dispatch(transactionFailure());\n            dispatch(\n                notify({\n                    message: err.message,\n                    date: new Date(),\n                    type: Severity.DANGER,\n                }),\n            );\n        }\n    };\n};\n\nexport const fetchTodo = () => {\n    return async (dispatch: any, getState: () => RootState) => {\n        dispatch(transactionBegin(TodoTransactionType.FETCH_TODO));\n        try {\n            const graphQLQuery = fetchTodoQuery(getState().auth.krypton.getUser()._id);\n            const res = await sendRequest(getState().auth.krypton.getAuthorizationHeader(), graphQLQuery);\n            if (!res.errors) {\n                dispatch(transactionSuccess([...res.data.todoMany]));\n            } else {\n                throw new Error('Transaction failed');\n            }\n        } catch (err) {\n            dispatch(transactionFailure());\n            dispatch(\n                notify({\n                    message: err.message,\n                    date: new Date(),\n                    type: Severity.DANGER,\n                }),\n            );\n        }\n    };\n};\n\nexport const TODO_TRANSACTION_BEGIN = 'TODO_TRANSACTION_BEGIN';\nconst transactionBegin = (transactionType: TodoTransactionType) => ({\n    type: TODO_TRANSACTION_BEGIN,\n    payload: { transactionType },\n});\n\nexport const TODO_TRANSACTION_SUCCESS = 'TODO_TRANSACTION_SUCCESS';\nconst transactionSuccess = (todos: Todo[]) => ({\n    type: TODO_TRANSACTION_SUCCESS,\n    payload: { todos },\n});\n\nexport const TODO_TRANSACTION_FAILURE = 'TODO_TRANSACTION_FAILURE';\nconst transactionFailure = () => ({\n    type: TODO_TRANSACTION_FAILURE,\n});\n\nasync function sendRequest(authorizationHeader: string, query: any): Promise<any> {\n    const headers: any = {\n        'Content-Type': 'application/json',\n    };\n\n    headers['Authorization'] = authorizationHeader;\n\n    const res = await fetch('https://nusid.net/todos', {\n        method: 'POST',\n        headers,\n        credentials: 'include',\n        body: JSON.stringify(query),\n    }).then((res) => res.json());\n    return res;\n}\n\nconst addTodoQuery = (text: string, userId: string): { query: string; variables: { text: string; userId: string } } => {\n    return {\n        query: `mutation todoCreateOne($text: String!, $userId: String!) {\n            todoCreateOne(record: {text: $text, userId: $userId}) {\n                record{\n                    text\n                    isCompleted\n                    date\n                    _id\n                }\n            }\n        }`,\n        variables: { text, userId },\n    };\n};\n\nconst deleteTodoQuery = (id: string): { query: string; variables: { id: string } } => {\n    return {\n        query: `mutation todoRemoveById($id: MongoID!){\n            todoRemoveById(_id: $id){\n                record{\n                    text\n                    isCompleted\n                    date\n                    _id\n                }\n            }\n        }`,\n        variables: { id },\n    };\n};\n\nconst completeTodoQuery = (id: string): { query: string; variables: { id: string } } => {\n    return {\n        query: `mutation todoUpdateById($id: MongoID!){\n            todoUpdateById(record:{_id: $id, isCompleted: true}){\n                record{\n                    text\n                    isCompleted\n                    date\n                    _id      \n                }\n            }\n        }`,\n        variables: { id },\n    };\n};\n\nconst fetchTodoQuery = (userId: string): { query: string; variables: { userId: string } } => {\n    return {\n        query: `query todoMany($userId: String!){\n            todoMany(filter: {userId: $userId}){\n                text\n                isCompleted\n                date\n                _id\n            }\n        }`,\n        variables: { userId },\n    };\n};\n","import React, { Component } from 'react';\nimport { RootState } from '../../../redux/Root';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport Form from '../../utils/Form';\nimport { addTodo } from '../../../redux/actions/TodoActions';\nimport { TodoTransactionType } from '../../../redux/states/TodoState';\n\ninterface Props {\n    dispatch: Dispatch<any>;\n    isTransactionLoading: boolean;\n    transactionType: TodoTransactionType | null;\n}\n\ninterface State {\n    text: string;\n}\n\nclass TodoAddForm extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            text: '',\n        };\n    }\n\n    handleTextChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({ ...this.state, text: event.target.value });\n    };\n\n    handleSubmit = (event?: React.FormEvent<HTMLButtonElement>): void | undefined => {\n        if (this.state.text !== '') {\n            this.props.dispatch(addTodo(this.state.text));\n            this.setState({ text: '' });\n        }\n    };\n\n    render() {\n        const isDisabled = this.state.text === '';\n        let submitClass = 'button is-link ';\n        if (this.props.isTransactionLoading && this.props.transactionType === TodoTransactionType.ADD_TODO) {\n            submitClass += 'is-loading';\n        }\n        return (\n            <div>\n                <Form onSubmit={this.handleSubmit}>\n                    <div className=\"columns is-vcentered\">\n                        <div className=\"column is-vcentered has-text-right\">\n                            <h2 className=\"subtitle\">Add a todo</h2>\n                        </div>\n                        <div className=\"column is-vcentered\">\n                            <div className=\"control\">\n                                <input\n                                    className=\"input\"\n                                    type=\"text\"\n                                    placeholder=\"Enter a todo\"\n                                    value={this.state.text}\n                                    onChange={this.handleTextChange}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"column\">\n                            <button className={submitClass} disabled={isDisabled}>\n                                Add\n                            </button>\n                        </div>\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    isTransactionLoading: state.todo.isTransactionLoading,\n    transactionType: state.todo.transactionType,\n});\n\nexport default connect(mapStateToProps)(TodoAddForm);\n","import React, { Component } from 'react';\nimport { Dispatch } from 'redux';\nimport TimeAgo from 'react-timeago';\nimport { connect } from 'react-redux';\nimport { Todo } from '../../../redux/states/TodoState';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\nimport { deleteTodo, completeTodo } from '../../../redux/actions/TodoActions';\n\ninterface Props {\n    dispatch: Dispatch<any>;\n    data: Todo;\n}\n\nclass TodoComponent extends Component<Props> {\n    handleClose = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void | undefined => {\n        this.props.dispatch(deleteTodo(this.props.data._id));\n    };\n\n    handleCompleted = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void | undefined => {\n        this.props.dispatch(completeTodo(this.props.data._id));\n    };\n\n    render() {\n        const date = new Date(this.props.data.date);\n        return (\n            <tr>\n                <td className=\"has-text-centered\" style={{ verticalAlign: 'middle' }}>\n                    {!this.props.data.isCompleted ? (\n                        <button className=\"button is-info is-outlined is-small\" onClick={this.handleCompleted}>\n                            Done\n                        </button>\n                    ) : (\n                        <FontAwesomeIcon icon={faCheck} style={{ color: 'green' }} />\n                    )}\n                </td>\n                <td style={{ verticalAlign: 'middle' }}>{this.props.data.text}</td>\n                <td style={{ verticalAlign: 'middle' }}>\n                    <TimeAgo date={date} minPeriod={10} />\n                </td>\n                <td style={{ verticalAlign: 'middle' }}>\n                    <button className=\"delete\" onClick={this.handleClose}></button>\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default connect()(TodoComponent);\n","import React, { Component } from 'react';\nimport { RootState } from '../../../redux/Root';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { Todo } from '../../../redux/states/TodoState';\nimport TodoComponent from './Todo';\ninterface Props {\n    dispatch: Dispatch<any>;\n    list: Todo[];\n}\n\ninterface State {}\n\nclass TodoTable extends Component<Props, State> {\n    render() {\n        const todos = this.props.list.map((todo) => <TodoComponent data={todo}></TodoComponent>);\n        return (\n            <table className=\"table is-fullwidth\">\n                <thead>\n                    <tr>\n                        <th className=\"has-text-centered\" style={{ width: '15%' }}>\n                            Status\n                        </th>\n                        <th className=\"is-two-fifths\" style={{ width: '60%' }}>\n                            Todo\n                        </th>\n                        <th style={{ width: '20%' }}>Date</th>\n                        <th style={{ width: '5%' }}></th>\n                    </tr>\n                </thead>\n                <tbody>{todos}</tbody>\n            </table>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    list: state.todo.list,\n});\n\nexport default connect(mapStateToProps)(TodoTable);\n","import React, { Component } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport TodoAddForm from './TodoAddForm';\nimport TodoTable from './TodoTable';\nimport { fetchTodo } from '../../../redux/actions/TodoActions';\n\ninterface Props {\n    dispatch: Dispatch<any>;\n}\n\nclass Todos extends Component<Props> {\n    componentWillMount() {\n        this.props.dispatch(fetchTodo());\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h1 className=\"title\">Todos</h1>\n                <TodoAddForm />\n                <TodoTable />\n            </div>\n        );\n    }\n}\n\nexport default connect()(Todos);\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../redux/Root';\nimport { notify } from '../../redux/actions/NotifyActions';\nimport { Severity } from '../../redux/states/NotifState';\n\nconst PrivateRoute: React.FC<any> = ({ children, isLoggedIn, dispatch, ...rest }: any) => {\n    const computeStatus = (): boolean => {\n        if (isLoggedIn) {\n            return true;\n        } else {\n            dispatch(\n                notify({\n                    message: 'Please log-in',\n                    date: new Date(),\n                    type: Severity.WARNING,\n                }),\n            );\n            return false;\n        }\n    };\n\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                computeStatus() ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: '/',\n                            state: { from: location },\n                        }}\n                    />\n                )\n            }\n        />\n    );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n    isLoggedIn: state.auth.isLoggedIn,\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import React, { Component } from 'react';\nimport NavBar from './partials/NavBar';\nimport Footer from './partials/Footer';\nimport Home from './pages/Home';\nimport 'bulma/css/bulma.css';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { checkLoginState } from '../redux/actions/AuthActions';\nimport { RootState } from '../redux/Root';\nimport { Dispatch } from 'redux';\nimport ToastContainer from './partials/ToastContainer';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Settings from './pages/settings/Index';\nimport Todos from './pages/todos/Index';\nimport PrivateRoute from './utils/PrivateRoute';\nimport io from 'socket.io-client';\nimport { AuthTransactionType } from '../redux/states/AuthState';\nimport { notify } from '../redux/actions/NotifyActions';\nimport { Severity } from '../redux/states/NotifState';\n\ninterface Props {\n    isTransactionLoading: boolean;\n    transactionType: AuthTransactionType | null;\n    dispatch: Dispatch<any>;\n}\n\nclass App extends Component<Props> {\n    public socket: any;\n\n    componentWillMount() {\n        this.socket = io(\"https://nusid.net/\");\n        this.socket.on(\"notification\", (data: any) => {\n            this.props.dispatch(\n                notify({\n                    message: data.title+' '+data.message,\n                    date: new Date(),\n                    type: Severity.INFO,\n                }));\n        });\n        this.props.dispatch(checkLoginState());\n    }\n\n    componentWillUnmount() {\n        this.socket.close();\n    }\n\n    render() {\n        if (this.props.isTransactionLoading && this.props.transactionType === AuthTransactionType.CHECK_LOGIN_STATE) {\n            const style: React.CSSProperties = {\n                position: 'fixed' /* or absolute */,\n                top: '50%',\n                left: '50%',\n            };\n            return <h1 style={style}>Loading...</h1>;\n        } else {\n            return (\n                <Router>\n                    <NavBar />\n                    <ToastContainer />\n                    <Route exact path=\"/\">\n                        <Home />\n                    </Route>\n                    <PrivateRoute path=\"/settings\">\n                        <Settings />\n                    </PrivateRoute>\n                    <PrivateRoute path=\"/todos\">\n                        <Todos />\n                    </PrivateRoute>\n                    <Footer />\n                </Router>\n            );\n        }\n    }\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    isTransactionLoading: state.auth.isTransactionLoading,\n    transactionType: state.auth.transactionType,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import Krypton from '@krypton-org/krypton-web';\nimport AuthState from '../states/AuthState';\nimport {\n    AUTH_TRANSACTION_BEGIN,\n    AUTH_TRANSACTION_FAILURE,\n    AUTH_TRANSACTION_SUCCESS,\n    ADD_LOGGED_USER,\n    REMOVE_LOGGED_USER,\n    REMOVE_MODALS_ERROR_MESSAGES,\n} from '../actions/AuthActions';\n\nconst initialState: AuthState = {\n    user: null,\n    krypton: new Krypton('https://nusid.net/krypton-auth'),\n    isLoggedIn: false,\n    isTransactionLoading: false,\n    isTransactionSuccess: false,\n    localErrorMessage: null,\n    transactionType: null,\n};\n\nexport default function userReducer(state = initialState, action: any): AuthState {\n    switch (action.type) {\n        case AUTH_TRANSACTION_BEGIN:\n            return {\n                ...state,\n                isTransactionLoading: true,\n                isTransactionSuccess: false,\n                transactionType: action.payload.transactionType,\n            };\n\n        case AUTH_TRANSACTION_FAILURE:\n            return {\n                ...state,\n                isTransactionLoading: false,\n                isTransactionSuccess: false,\n                localErrorMessage: action.payload.error,\n            };\n        case AUTH_TRANSACTION_SUCCESS:\n            return {\n                ...state,\n                isTransactionLoading: false,\n                isTransactionSuccess: true,\n                localErrorMessage: null,\n            };\n        case ADD_LOGGED_USER: {\n            return {\n                ...state,\n                isLoggedIn: true,\n                user: action.payload.user,\n            };\n        }\n        case REMOVE_LOGGED_USER: {\n            return {\n                ...state,\n                isLoggedIn: false,\n                user: null,\n            };\n        }\n        case REMOVE_MODALS_ERROR_MESSAGES: {\n            return {\n                ...state,\n                localErrorMessage: null,\n            };\n        }\n        default:\n            return state;\n    }\n}\n","import NotifierState from '../states/NotifState';\nconst initialState = {\n    lastNotification: null,\n};\n\nexport default function userReducer(state = initialState, action: any): NotifierState {\n    switch (action.type) {\n        case 'NOTIFY':\n            return {\n                lastNotification: action.payload.notification,\n            };\n        default:\n            return state;\n    }\n}\n","import TodoState from '../states/TodoState';\nimport { TODO_TRANSACTION_BEGIN, TODO_TRANSACTION_FAILURE, TODO_TRANSACTION_SUCCESS } from '../actions/TodoActions';\n\nconst initialState: TodoState = {\n    isTransactionLoading: false,\n    isTransactionSuccess: false,\n    transactionType: null,\n    list: [],\n};\n\nexport default function userReducer(state = initialState, action: any): TodoState {\n    switch (action.type) {\n        case TODO_TRANSACTION_BEGIN:\n            return {\n                ...state,\n                isTransactionLoading: true,\n                isTransactionSuccess: false,\n                transactionType: action.payload.transactionType,\n            };\n        case TODO_TRANSACTION_FAILURE:\n            return {\n                ...state,\n                isTransactionLoading: false,\n                isTransactionSuccess: false,\n                transactionType: null,\n            };\n        case TODO_TRANSACTION_SUCCESS:\n            return {\n                ...state,\n                isTransactionLoading: false,\n                isTransactionSuccess: true,\n                transactionType: null,\n                list: action.payload.todos,\n            };\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport authReducer from './reducers/AuthReducer';\nimport notificationReducer from './reducers/NotifierReducer';\nimport todoReducer from './reducers/TodoReducer';\nimport AuthState from './states/AuthState';\nimport NotifierState from './states/NotifState';\nimport TodoState from './states/TodoState';\n\nexport interface RootState {\n    auth: AuthState;\n    notifier: NotifierState;\n    todo: TodoState;\n}\n\nexport default combineReducers({\n    auth: authReducer,\n    notifier: notificationReducer,\n    todo: todoReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './redux/Root';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}